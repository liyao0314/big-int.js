/**
 * bi.test.js
 * @author jizha.wyj (oldj)
 * @blog http://oldj.net
 */

'use strict';

const bi = require('./bi');
const assert = require('chai').assert;

describe('bi test', () => {
    it('normal integer add', () => {
        assert.equal(bi.add(1, 2), '3');
        assert.equal(bi.add(123, 123), '246');
        assert.equal(bi.add(99, 97), '196');
        assert.equal(bi.add(95, 97), '192');

        let i, a, b;
        for (i = 0; i < 100; i ++) {
            a = Math.floor(Math.random() * 10000000000);
            b = Math.floor(Math.random() * 10000000000);
            assert.equal(bi.add(a, b), a + b);
        }
    });

    it('big integer add', () => {
        assert.equal(bi.add('480027871711443951698680625592', '1'), '480027871711443951698680625593');
        assert.equal(bi.add('480027871711443951698680625592', '720909917396388080276392278025'), '1200937789107832031975072903617');
        assert.equal(bi.add('5253475347546238175049014050816', '5202873682266597444058278264832'), '10456349029812835619107292315648');
        assert.equal(bi.add('60473120133317888948734273443043682380747322777992917547253434093889148892703825510307401124110401536', '55957687045486570518588298474543882810249517599331189044932895225227820749258907974028121089371013120'), '116430807178804459467322571917587565190996840377324106592186329319116969641962733484335522213481414656');
    });

    it('normal integer minus', () => {
        assert.equal(bi.minus(3, 2), '1');
        assert.equal(bi.minus(1, 2), '-1');
        assert.equal(bi.minus(217946, 380108), '-162162');
        assert.equal(bi.minus(380108, 217946), '162162');

        let i, a, b;
        for (i = 0; i < 100; i ++) {
            a = Math.floor(Math.random() * 10000000000);
            b = Math.floor(Math.random() * 10000000000);
            assert.equal(bi.minus(a, b), (a - b).toString());
        }
    });

    it('big integer minus', () => {
        assert.equal(bi.minus('5253475347546238175049014050816', '5202873682266597444058278264832'), '50601665279640730990735785984');
        assert.equal(bi.minus('1558967553146982599274520379392', '2659840624870349911674882883584'), '-1100873071723367312400362504192');
        assert.equal(bi.minus('7052925032575858187901935288320', '5549540621356321857555415433216'), '1503384411219536330346519855104');
        assert.equal(bi.minus('81803404497614272556494655971045508648784614479854977629190804272880484333339135713708630998142418944', '4709667966829785171519114648462214801905085617160881886643201985618793984468810439610859520'), '81803404492904604589664870799526394000322399677949892012029922386237282347720341729239820558531559424');
    });

    it('normal integer multiply', () => {
        assert.equal(bi.multiply(2, 3), '6');
        assert.equal(bi.multiply(5, 3), '15');
        assert.equal(bi.multiply(282683, 99), '27985617');

        let i, a, b;
        for (i = 0; i < 100; i ++) {
            a = Math.floor(Math.random() * 100000);
            b = Math.floor(Math.random() * 100000);
            assert.equal(bi.multiply(a, b), (a * b).toString());
        }
    });

    it('big integer multiply', () => {
        assert.equal(bi.multiply('2438028546298331864303040200704', '9750324070021132876790640934912'), '23771568418371257134242894718584464502323088368272530680578048');
        assert.equal(bi.multiply('9873623885529270874027906301952', '303318275406403419894911598592'), '2994850568970210417353067684446923409209437856586655370051584');
        assert.equal(bi.multiply('372536125961462789047919650542277336744656656924672', '396744719154541532084272281240212087200856070422528'), '147801740669501462732597060848595811499149358229470981239102803325150905088076151059738191896107810816');
        assert.equal(bi.multiply('1338105307763825975614802760052214459414629616419827327717901212208315922873558758607629642499096576', '30188170642201315089305830675711360824999828186001538896692879433040509221475053389096499378003116032'), '40394951368009686776184877249336606112518312404298014359261676119487292947103790766644730372808284803194803642825204094682188762083536016132816855677047622967329982357453501468322898556105472901906432');
    });

    it('normal integer divide', () => {
        assert.equal(bi.divide(20, 4), '5');
        assert.equal(bi.divide(20, 40), '0');
        assert.equal(bi.divide(100, 40), '2');
        assert.equal(bi.divide(100, 99), '1');

        let i, a, b;
        for (i = 0; i < 100; i ++) {
            a = Math.floor(Math.random() * 10000000000);
            b = Math.floor(Math.random() * 10000000000);
            assert.equal(bi.divide(a, b), Math.floor(a / b).toString());
        }
    });

    it('big integer divide', () => {
        assert.equal(bi.divide('22466694603796577071109505024', '66555113825'), '337565264524533760');
        // assert.equal(bi.divide('72150169410859126236206443117707768032755172938717890372212407839914414604180174028908411680605601792', '786446101991411102341117807745062945003343739617280'), '91742039572912893577653304993176092790608743104512');
    });
});
